1.

Промени задача 2, така че да се въвеждат различен брой числа, не просто 4. Т.е.
програмата първо прочита n и после n наброй числа. За всяко трява да намери
колко прости числа са по-малки или равни на него.

Направи го така: Стартирай 4 thread-a, изчакай ги да свършат всичките, и им дай
отново 4 числа. Приеми, че n се дели на 4 (за да е по-лесно).

Това не е добра имплементация. Но е една стъпка по-близо до решението на
задачата. Можеш ли да ми кажеш защо не е?

2.

Сложил съм хешираща функция я zad3.cpp. Те са много полезни в криптографията:
- Използват се за рефериране към обекти, които са по-големи/неудобни за работа.
  Например в git се обръщаме към commit-и с техния хеш.
- Ако искам да изпратя съобщение А, което е важно. Към него ще изпратя и хеша му
  Б.  Когато А и Б бъдат получени, може да се провери, че хеша на А е наистина
  Б.  Ако някой примени съобщението А на А', то получателя ще получи А' и Б.  Но
  хеша на А' няма да е Б и ще игнорира А'.

Последното не е винаги вярно. Има безброй много А', такива че хеша им да е Б.
Това се нарича колиция, понеже хеш А = хеш А'.
-------------------------------------------------------------------------------

Програмата прочита едно число x', това е хеша на числото x. Намери всички числа
y, такива че hash(y) = x' = hash(x). Разбий интервала 0 - INT_MAX на 4, където
ще търсиш y. На всяка нишка подай номера й, с който тя ще определи в кой
интервал да търси колиция.
